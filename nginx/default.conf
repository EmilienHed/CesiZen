server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    # Configuration des types MIME
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Types MIME spécifiques pour JavaScript modules
    types {
        application/javascript js mjs;
        text/javascript js mjs;
    }
    
    # Servir directement les fichiers statiques depuis le frontend
    location ~ ^/emilien-(dev|prod)/assets/ {
        alias /var/www/html/;
        try_files $uri $uri/ =404;
        add_header Cache-Control "public, max-age=31536000";
    }

    # Frontend Angular SSR
    location / {
        proxy_pass http://frontend:4000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Routes spécifiques pour emilien-dev et emilien-prod
    location /emilien-dev/ {
        proxy_pass http://frontend:4000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    
    location /emilien-prod/ {
        proxy_pass http://frontend:4000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Backend .NET API
#    location /api/ {
#        proxy_pass http://backend:5000/api/;
#          proxy_http_version 1.1;
#        proxy_set_header Host $host;
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-Forwarded-Proto $scheme;
#    }
}

# Redirection HTTP vers HTTPS
server {
    listen 80;
    server_name localhost;

    return 301 https://$host$request_uri;
}
